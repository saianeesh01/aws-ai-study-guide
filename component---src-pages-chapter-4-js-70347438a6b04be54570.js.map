{"version":3,"file":"component---src-pages-chapter-4-js-70347438a6b04be54570.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/components/FlashcardsChapter4.js","webpack://gatsby-starter-default/./src/components/NeuralNetworkDiagram.js","webpack://gatsby-starter-default/./src/pages/chapter-4.js"],"sourcesContent":["import * as React from \"react\"\nimport \"./layout.css\"\n\nconst Layout = ({ children, isFullWidth = false }) => {\n  return (\n    <>\n      <div\n        style={{\n          margin: \"0 auto\",\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\n        }}\n      >\n        <main>{children}</main>\n        {!isFullWidth && (\n          <footer\n            style={{\n              marginTop: `var(--space-5)`,\n              fontSize: `var(--font-sm)`,\n              color: \"#888\",\n            }}\n          >\n            © {new Date().getFullYear()} · Built for AWS AI learners\n          </footer>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","// src/components/seo.js\nimport * as React from \"react\"\n\nexport function Head({ title, description = \"\" }) {\n  const siteTitle = \"AWS AI Study Guide\"\n  const siteDescription = description || \"Interactive learning for AWS AI\"\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\n  const author = \"Aneesh Mussim\"\n\n  return (\n    <>\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\n      <meta name=\"description\" content={siteDescription} />\n      <meta property=\"og:title\" content={title || siteTitle} />\n      <meta property=\"og:description\" content={siteDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={siteUrl} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"twitter:title\" content={title || siteTitle} />\n      <meta name=\"twitter:description\" content={siteDescription} />\n    </>\n  )\n}\n","import * as React from \"react\"\nimport styled, { keyframes } from \"styled-components\"\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`\n\nconst Card = styled.div`\n  background: #111;\n  border: 1px solid #00ff90;\n  border-radius: 10px;\n  padding: 2rem;\n  margin-bottom: 1rem;\n  text-align: center;\n  font-family: \"Courier New\", monospace;\n  color: #00ff90;\n  animation: ${fadeIn} 0.5s ease;\n  transition: transform 0.4s ease;\n\n  &:hover {\n    transform: scale(1.02);\n  }\n`\n\nconst Button = styled.button`\n  background: #00ff90;\n  color: black;\n  border: none;\n  padding: 0.6rem 1.2rem;\n  margin-top: 1rem;\n  border-radius: 6px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background 0.3s ease;\n\n  &:hover {\n    background: #00cc70;\n  }\n`\n\nfunction shuffleArray(array) {\n  return [...array].sort(() => Math.random() - 0.5)\n}\n\nconst flashcards = [\n    { question: \"What is a neural network?\", answer: \"A machine learning model inspired by the human brain that learns from data using layers of interconnected neurons.\" },\n    { question: \"What are the three main types of layers in a neural network?\", answer: \"Input layer, hidden layers, and output layer.\" },\n    { question: \"What is the function of the input layer?\", answer: \"It receives raw features or data to feed into the network.\" },\n    { question: \"What happens in hidden layers?\", answer: \"They perform intermediate computations and transformations using weighted inputs and activation functions.\" },\n    { question: \"What is the output layer responsible for?\", answer: \"Producing the final predictions or scores.\" },\n    { question: \"What is a neuron (or node) in a neural network?\", answer: \"A computational unit that performs a weighted sum of inputs and applies an activation function.\" },\n    { question: \"What is an activation function?\", answer: \"A function that introduces non-linearity into the network, enabling it to learn complex patterns.\" },\n    { question: \"Name three common activation functions.\", answer: \"ReLU, Sigmoid, and Softmax.\" },\n    { question: \"What does ReLU stand for?\", answer: \"Rectified Linear Unit – outputs max(0, x).\" },\n    { question: \"When is Softmax typically used?\", answer: \"In the output layer of classification tasks to convert logits to probabilities.\" },\n    { question: \"What is the purpose of backpropagation?\", answer: \"To adjust weights in the network based on the error using gradients.\" },\n    { question: \"What algorithm is used to optimize weights during training?\", answer: \"Gradient Descent (and its variants like Adam).\" },\n    { question: \"What is a loss function?\", answer: \"A function that measures the difference between the predicted output and the actual target.\" },\n    { question: \"What does Binary Cross-Entropy measure?\", answer: \"Error for binary classification problems.\" },\n    { question: \"What is the purpose of Mean Squared Error (MSE)?\", answer: \"It's used in regression to penalize larger errors more.\" },\n    { question: \"What is forward propagation?\", answer: \"The process of passing inputs through the network to generate predictions.\" },\n    { question: \"What is the vanishing gradient problem?\", answer: \"When gradients become too small, preventing proper weight updates – often in deep networks using Sigmoid or Tanh.\" },\n    { question: \"How does ReLU help avoid vanishing gradients?\", answer: \"It allows gradients to pass through for positive values, improving training stability.\" },\n    { question: \"What is dropout in neural networks?\", answer: \"A regularization technique that randomly disables neurons during training to prevent overfitting.\" },\n    { question: \"What is overfitting in neural networks?\", answer: \"When the model learns noise from the training data and performs poorly on unseen data.\" },\n    { question: \"What is a fully connected (dense) layer?\", answer: \"A layer where each neuron is connected to all outputs from the previous layer.\" },\n    { question: \"How does batch normalization help?\", answer: \"It stabilizes learning by normalizing layer inputs during training.\" },\n    { question: \"What is an epoch?\", answer: \"One full pass through the entire training dataset.\" },\n    { question: \"What does the learning rate control?\", answer: \"How much weights are updated during training.\" },\n    { question: \"What is a convolutional neural network (CNN)?\", answer: \"A specialized NN for processing image data using filters and pooling.\" },\n    { question: \"What kind of problems are CNNs best suited for?\", answer: \"Image classification, object detection, facial recognition.\" },\n    { question: \"What is a real-world application of neural networks?\", answer: \"Self-driving cars use neural networks to interpret visual input and make decisions.\" },\n    { question: \"What is a deep neural network?\", answer: \"A network with many hidden layers capable of learning highly abstract representations.\" },\n    { question: \"Why are activation functions crucial?\", answer: \"Without them, the network could only learn linear functions regardless of layers.\" },\n    { question: \"What does 'training' mean in the context of neural networks?\", answer: \"Optimizing weights to minimize the loss between predicted and actual outputs.\" }\n  ]\n\nexport default function FlashcardsChapter3() {\n  const [shuffledCards] = React.useState(() => shuffleArray(flashcards))\n  const [index, setIndex] = React.useState(0)\n  const [showAnswer, setShowAnswer] = React.useState(false)\n\n  const nextCard = () => {\n    setShowAnswer(false)\n    setIndex((prev) => (prev + 1) % shuffledCards.length)\n  }\n\n  return (\n    <Card>\n      <h2>🧠 Flashcard {index + 1} of {shuffledCards.length}</h2>\n      <p>{shuffledCards[index].question}</p>\n      {showAnswer && <p><strong>Answer:</strong> {shuffledCards[index].answer}</p>}\n      <div>\n        <Button onClick={() => setShowAnswer((prev) => !prev)}>\n          {showAnswer ? \"Hide Answer\" : \"Show Answer\"}\n        </Button>\n        <Button onClick={nextCard} style={{ marginLeft: \"1rem\" }}>\n          Next\n        </Button>\n      </div>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport styled, { keyframes } from \"styled-components\"\n\nconst fadeIn = keyframes`\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n`\n\nconst DiagramWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 3rem 0;\n  flex-wrap: wrap;\n  position: relative;\n`\n\nconst Layer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 2rem;\n  gap: 1.2rem;\n  position: relative;\n`\n\nconst Neuron = styled.div`\n  width: 40px;\n  height: 40px;\n  background: ${({ faded }) => (faded ? \"#333\" : \"#00ff90\")};\n  border-radius: 50%;\n  border: 2px solid #00ff90;\n  position: relative;\n  animation: ${fadeIn} 0.6s ease;\n  transition: transform 0.3s;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  &::after {\n    content: attr(data-label);\n    position: absolute;\n    top: 50%;\n    left: 130%;\n    transform: translateY(-50%);\n    font-size: 0.7rem;\n    color: #00ffcc;\n    white-space: nowrap;\n  }\n`\n\nconst SvgLines = styled.svg`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n`\n\nconst FlowLine = styled.line`\n  stroke: #00ff90;\n  stroke-width: 2;\n  stroke-dasharray: 6;\n  stroke-dashoffset: 0;\n  animation: dash 1.5s linear infinite;\n\n  @keyframes dash {\n    to {\n      stroke-dashoffset: -12;\n    }\n  }\n`\n\nexport default function NeuralNetworkDiagram() {\n  const inputs = [\"Pixels\", \"Edges\", \"Brightness\"]\n  const hiddens = [\"Feature 1\", \"Feature 2\", \"Feature 3\"]\n  const outputs = [\"Cat\", \"Dog\"]\n\n  return (\n    <DiagramWrapper>\n      {/* Input Layer */}\n      <Layer>\n        {inputs.map((label, i) => (\n          <Neuron key={i} data-label={label} />\n        ))}\n      </Layer>\n\n      {/* Hidden Layer */}\n      <Layer>\n        {hiddens.map((label, i) => (\n          <Neuron key={i} data-label={label} />\n        ))}\n      </Layer>\n\n      {/* Output Layer */}\n      <Layer>\n        {outputs.map((label, i) => (\n          <Neuron key={i} data-label={label} />\n        ))}\n      </Layer>\n\n      {/* Optional lines for signal flow */}\n      <SvgLines viewBox=\"0 0 600 300\" preserveAspectRatio=\"xMidYMid meet\">\n        <FlowLine x1=\"100\" y1=\"60\" x2=\"220\" y2=\"60\" />\n        <FlowLine x1=\"100\" y1=\"120\" x2=\"220\" y2=\"100\" />\n        <FlowLine x1=\"100\" y1=\"180\" x2=\"220\" y2=\"140\" />\n        <FlowLine x1=\"220\" y1=\"60\" x2=\"340\" y2=\"90\" />\n        <FlowLine x1=\"220\" y1=\"100\" x2=\"340\" y2=\"120\" />\n        <FlowLine x1=\"220\" y1=\"140\" x2=\"340\" y2=\"150\" />\n      </SvgLines>\n    </DiagramWrapper>\n  )\n}\n","// src/pages/chapter-4.js\nimport * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport { Head } from \"../components/seo\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport FlashcardsChapter4 from \"../components/FlashcardsChapter4\"\nimport NeuralNetworkDiagram from \"../components/NeuralNetworkDiagram\"\n\n\n\n\nconst DiagramWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin: 3rem 0;\n  gap: 3rem;\n`\n\nconst Layer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Neuron = styled.div`\n  width: 40px;\n  height: 40px;\n  margin: 0.5rem;\n  border-radius: 50%;\n  background: #00ff90;\n  opacity: 0.8;\n  transition: transform 0.2s ease;\n  &:hover {\n    transform: scale(1.2);\n    opacity: 1;\n  }\n`\n\nconst LayerLabel = styled.p`\n  color: #00ffcc;\n  font-weight: bold;\n  margin-top: 1rem;\n  font-family: \"Courier New\", monospace;\n`\n\n\n\n\n\n\nconst PageWrapper = styled.div`\n  color: #00ff90;\n  background: black;\n  padding: 3rem 2rem;\n  font-family: \"Courier New\", monospace;\n  min-height: 100vh;\n\n  h1, h2, h3 {\n    color: #00ff90;\n    margin-top: 2rem;\n  }\n\n  p, li {\n    line-height: 1.7;\n  }\n\n  ul {\n    margin-left: 1.5rem;\n  }\n\n  strong {\n    color: #00ffcc;\n  }\n\n  code {\n    background: #111;\n    padding: 0.2rem 0.4rem;\n    border-radius: 4px;\n    color: #00ffcc;\n  }\n\n  .button-group {\n    margin-top: 3rem;\n    display: flex;\n    gap: 1rem;\n    flex-wrap: wrap;\n\n    a {\n      background: #00ff90;\n      color: black;\n      padding: 0.75rem 1.5rem;\n      border-radius: 8px;\n      text-decoration: none;\n      font-weight: bold;\n      transition: background 0.3s ease;\n\n      &:hover {\n        background: #00cc70;\n      }\n    }\n  }\n`\nconst CodeDemo = styled.pre`\n  background: #111;\n  color: #00ffcc;\n  padding: 1.5rem;\n  border-radius: 10px;\n  font-family: \"Courier New\", monospace;\n  white-space: pre-wrap;\n  margin-top: 2rem;\n  border: 1px solid #00ff90;\n`\nconst FlowLine = styled.line`\n  stroke: #00ff90;\n  stroke-width: 2;\n  stroke-dasharray: 6;\n  stroke-dashoffset: 0;\n  animation: dash 1.2s linear infinite;\n\n  @keyframes dash {\n    to {\n      stroke-dashoffset: -12;\n    }\n  }\n`\nconst NeuronCircle = styled.div`\n  position: relative;\n  ...\n  &::after {\n    content: attr(data-tooltip);\n    position: absolute;\n    top: -30px;\n    left: 50%;\n    transform: translateX(-50%);\n    color: #00ffcc;\n    font-size: 0.75rem;\n    display: none;\n  }\n\n  &:hover::after {\n    display: block;\n  }\n`\n\n\n\nexport default function Chapter4Page() {\n  return (\n    <Layout>\n      <PageWrapper>\n        <h1>🧠 Chapter 4: Fundamentals of Neural Networks</h1>\n        <p>\n          Neural networks are the foundation of deep learning. They mimic the structure of the human brain, enabling computers to recognize complex patterns and make intelligent decisions.\n        </p>\n        <NeuralNetworkDiagram />\n\n        <h2>🧬 Structure of a Neural Network</h2>\n        <ul>\n          <li><strong>Input Layer:</strong> Accepts raw features (like image pixels, text embeddings, etc).</li>\n          <li><strong>Hidden Layers:</strong> Perform intermediate computations and transformations.</li>\n          <li><strong>Output Layer:</strong> Produces predictions or scores.</li>\n        </ul>\n        <p>Each neuron applies a weighted sum of inputs, adds a bias, and uses an <strong>activation function</strong>.</p>\n        <h2>⚡ Activation Functions</h2>\n        <ul>\n          <li><strong>ReLU (Rectified Linear Unit):</strong> Efficient and widely used – <code>max(0, x)</code></li>\n          <li><strong>Sigmoid:</strong> Compresses output between 0 and 1 – good for probabilities</li>\n          <li><strong>Softmax:</strong> Converts logits into probabilities – often used in classification</li>\n        </ul>\n\n        <h2>🔁 Forward & Backward Propagation</h2>\n        <p>\n          During <strong>forward propagation</strong>, data flows through the network to produce predictions.\n        </p>\n        <p>\n          <strong>Backpropagation</strong> then adjusts weights using the error (loss) via <strong>gradient descent</strong>.\n        </p>\n\n        <h2>🎯 Loss Functions</h2>\n        <ul>\n          <li><strong>Binary Cross-Entropy:</strong> For binary classification</li>\n          <li><strong>Categorical Cross-Entropy:</strong> For multi-class classification</li>\n          <li><strong>MSE (Mean Squared Error):</strong> For regression tasks</li>\n        </ul>\n\n        <h2>🚀 Real-World Applications</h2>\n        <ul>\n          <li>Image classification (e.g., disease detection from medical scans)</li>\n          <li>Voice assistants (e.g., Siri, Alexa)</li>\n          <li>Text classification (e.g., spam filtering, sentiment analysis)</li>\n          <li>Fraud detection in financial systems</li>\n        </ul>\n\n        <h2>🧠 Key Takeaways</h2>\n        <ul>\n          <li>Neural networks learn from data by adjusting weights through training</li>\n          <li>Activation functions enable learning of complex patterns</li>\n          <li>Loss functions guide the learning by measuring prediction error</li>\n        </ul>\n\n        <CodeDemo>{`\n# Step-by-step neural network inference (pseudo-code)\n\ninputs = [0.3, 0.7, 0.2]\n\n# Hidden layer\nh1 = relu(w1 * inputs + b1)\nh2 = relu(w2 * inputs + b2)\n\n# Output layer\noutput = softmax([h1, h2])\n\nreturn prediction\n`}</CodeDemo>\n\n        <FlashcardsChapter4 />\n        <div className=\"button-group\">\n          <Link to=\"/quiz-chapter-4\">📝 Quiz</Link>\n          <Link to=\"/\">🏠 Home</Link>\n        </div>\n      </PageWrapper>\n    </Layout>\n  )\n}\n\nexport { Head }\n\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","fadeIn","keyframes","Card","styled","div","withConfig","displayName","componentId","Button","button","flashcards","question","answer","FlashcardsChapter3","shuffledCards","shuffleArray","array","_toConsumableArray","sort","Math","random","index","setIndex","showAnswer","setShowAnswer","length","onClick","prev","nextCard","marginLeft","DiagramWrapper","Layer","Neuron","faded","SvgLines","svg","FlowLine","line","NeuralNetworkDiagram","map","label","i","key","viewBox","preserveAspectRatio","x1","y1","x2","y2","p","PageWrapper","CodeDemo","pre","Chapter4Page","Layout","FlashcardsChapter4","className","Link","to"],"sourceRoot":""}