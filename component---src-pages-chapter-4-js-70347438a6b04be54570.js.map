{"version":3,"file":"component---src-pages-chapter-4-js-70347438a6b04be54570.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/components/FlashcardsChapter4.js","webpack://gatsby-starter-default/./src/components/NeuralNetworkDiagram.js","webpack://gatsby-starter-default/./src/pages/chapter-4.js"],"sourcesContent":["import * as React from \"react\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children, isFullWidth = false }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          margin: \"0 auto\",\r\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\r\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\r\n        }}\r\n      >\r\n        <main>{children}</main>\r\n        {!isFullWidth && (\r\n          <footer\r\n            style={{\r\n              marginTop: `var(--space-5)`,\r\n              fontSize: `var(--font-sm)`,\r\n              color: \"#888\",\r\n            }}\r\n          >\r\n            © {new Date().getFullYear()} · Built for AWS AI learners\r\n          </footer>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","// src/components/seo.js\r\nimport * as React from \"react\"\r\n\r\nexport function Head({ title, description = \"\" }) {\r\n  const siteTitle = \"AWS AI Study Guide\"\r\n  const siteDescription = description || \"Interactive learning for AWS AI\"\r\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\r\n  const author = \"Aneesh Mussim\"\r\n\r\n  return (\r\n    <>\r\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\r\n      <meta name=\"description\" content={siteDescription} />\r\n      <meta property=\"og:title\" content={title || siteTitle} />\r\n      <meta property=\"og:description\" content={siteDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta property=\"og:url\" content={siteUrl} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={author} />\r\n      <meta name=\"twitter:title\" content={title || siteTitle} />\r\n      <meta name=\"twitter:description\" content={siteDescription} />\r\n    </>\r\n  )\r\n}\r\n","import * as React from \"react\"\r\nimport styled, { keyframes } from \"styled-components\"\r\n\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`\r\n\r\nconst Card = styled.div`\r\n  background: #111;\r\n  border: 1px solid #00ff90;\r\n  border-radius: 10px;\r\n  padding: 2rem;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n  font-family: \"Courier New\", monospace;\r\n  color: #00ff90;\r\n  animation: ${fadeIn} 0.5s ease;\r\n  transition: transform 0.4s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n`\r\n\r\nconst Button = styled.button`\r\n  background: #00ff90;\r\n  color: black;\r\n  border: none;\r\n  padding: 0.6rem 1.2rem;\r\n  margin-top: 1rem;\r\n  border-radius: 6px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background 0.3s ease;\r\n\r\n  &:hover {\r\n    background: #00cc70;\r\n  }\r\n`\r\n\r\nfunction shuffleArray(array) {\r\n  return [...array].sort(() => Math.random() - 0.5)\r\n}\r\n\r\nconst flashcards = [\r\n    { question: \"What is a neural network?\", answer: \"A machine learning model inspired by the human brain that learns from data using layers of interconnected neurons.\" },\r\n    { question: \"What are the three main types of layers in a neural network?\", answer: \"Input layer, hidden layers, and output layer.\" },\r\n    { question: \"What is the function of the input layer?\", answer: \"It receives raw features or data to feed into the network.\" },\r\n    { question: \"What happens in hidden layers?\", answer: \"They perform intermediate computations and transformations using weighted inputs and activation functions.\" },\r\n    { question: \"What is the output layer responsible for?\", answer: \"Producing the final predictions or scores.\" },\r\n    { question: \"What is a neuron (or node) in a neural network?\", answer: \"A computational unit that performs a weighted sum of inputs and applies an activation function.\" },\r\n    { question: \"What is an activation function?\", answer: \"A function that introduces non-linearity into the network, enabling it to learn complex patterns.\" },\r\n    { question: \"Name three common activation functions.\", answer: \"ReLU, Sigmoid, and Softmax.\" },\r\n    { question: \"What does ReLU stand for?\", answer: \"Rectified Linear Unit – outputs max(0, x).\" },\r\n    { question: \"When is Softmax typically used?\", answer: \"In the output layer of classification tasks to convert logits to probabilities.\" },\r\n    { question: \"What is the purpose of backpropagation?\", answer: \"To adjust weights in the network based on the error using gradients.\" },\r\n    { question: \"What algorithm is used to optimize weights during training?\", answer: \"Gradient Descent (and its variants like Adam).\" },\r\n    { question: \"What is a loss function?\", answer: \"A function that measures the difference between the predicted output and the actual target.\" },\r\n    { question: \"What does Binary Cross-Entropy measure?\", answer: \"Error for binary classification problems.\" },\r\n    { question: \"What is the purpose of Mean Squared Error (MSE)?\", answer: \"It's used in regression to penalize larger errors more.\" },\r\n    { question: \"What is forward propagation?\", answer: \"The process of passing inputs through the network to generate predictions.\" },\r\n    { question: \"What is the vanishing gradient problem?\", answer: \"When gradients become too small, preventing proper weight updates – often in deep networks using Sigmoid or Tanh.\" },\r\n    { question: \"How does ReLU help avoid vanishing gradients?\", answer: \"It allows gradients to pass through for positive values, improving training stability.\" },\r\n    { question: \"What is dropout in neural networks?\", answer: \"A regularization technique that randomly disables neurons during training to prevent overfitting.\" },\r\n    { question: \"What is overfitting in neural networks?\", answer: \"When the model learns noise from the training data and performs poorly on unseen data.\" },\r\n    { question: \"What is a fully connected (dense) layer?\", answer: \"A layer where each neuron is connected to all outputs from the previous layer.\" },\r\n    { question: \"How does batch normalization help?\", answer: \"It stabilizes learning by normalizing layer inputs during training.\" },\r\n    { question: \"What is an epoch?\", answer: \"One full pass through the entire training dataset.\" },\r\n    { question: \"What does the learning rate control?\", answer: \"How much weights are updated during training.\" },\r\n    { question: \"What is a convolutional neural network (CNN)?\", answer: \"A specialized NN for processing image data using filters and pooling.\" },\r\n    { question: \"What kind of problems are CNNs best suited for?\", answer: \"Image classification, object detection, facial recognition.\" },\r\n    { question: \"What is a real-world application of neural networks?\", answer: \"Self-driving cars use neural networks to interpret visual input and make decisions.\" },\r\n    { question: \"What is a deep neural network?\", answer: \"A network with many hidden layers capable of learning highly abstract representations.\" },\r\n    { question: \"Why are activation functions crucial?\", answer: \"Without them, the network could only learn linear functions regardless of layers.\" },\r\n    { question: \"What does 'training' mean in the context of neural networks?\", answer: \"Optimizing weights to minimize the loss between predicted and actual outputs.\" }\r\n  ]\r\n\r\nexport default function FlashcardsChapter3() {\r\n  const [shuffledCards] = React.useState(() => shuffleArray(flashcards))\r\n  const [index, setIndex] = React.useState(0)\r\n  const [showAnswer, setShowAnswer] = React.useState(false)\r\n\r\n  const nextCard = () => {\r\n    setShowAnswer(false)\r\n    setIndex((prev) => (prev + 1) % shuffledCards.length)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <h2>🧠 Flashcard {index + 1} of {shuffledCards.length}</h2>\r\n      <p>{shuffledCards[index].question}</p>\r\n      {showAnswer && <p><strong>Answer:</strong> {shuffledCards[index].answer}</p>}\r\n      <div>\r\n        <Button onClick={() => setShowAnswer((prev) => !prev)}>\r\n          {showAnswer ? \"Hide Answer\" : \"Show Answer\"}\r\n        </Button>\r\n        <Button onClick={nextCard} style={{ marginLeft: \"1rem\" }}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import * as React from \"react\"\r\nimport styled, { keyframes } from \"styled-components\"\r\n\r\nconst fadeIn = keyframes`\r\n  from { opacity: 0; transform: translateY(10px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n`\r\n\r\nconst DiagramWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 3rem 0;\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n`\r\n\r\nconst Layer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 2rem;\r\n  gap: 1.2rem;\r\n  position: relative;\r\n`\r\n\r\nconst Neuron = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  background: ${({ faded }) => (faded ? \"#333\" : \"#00ff90\")};\r\n  border-radius: 50%;\r\n  border: 2px solid #00ff90;\r\n  position: relative;\r\n  animation: ${fadeIn} 0.6s ease;\r\n  transition: transform 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &::after {\r\n    content: attr(data-label);\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 130%;\r\n    transform: translateY(-50%);\r\n    font-size: 0.7rem;\r\n    color: #00ffcc;\r\n    white-space: nowrap;\r\n  }\r\n`\r\n\r\nconst SvgLines = styled.svg`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  pointer-events: none;\r\n`\r\n\r\nconst FlowLine = styled.line`\r\n  stroke: #00ff90;\r\n  stroke-width: 2;\r\n  stroke-dasharray: 6;\r\n  stroke-dashoffset: 0;\r\n  animation: dash 1.5s linear infinite;\r\n\r\n  @keyframes dash {\r\n    to {\r\n      stroke-dashoffset: -12;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function NeuralNetworkDiagram() {\r\n  const inputs = [\"Pixels\", \"Edges\", \"Brightness\"]\r\n  const hiddens = [\"Feature 1\", \"Feature 2\", \"Feature 3\"]\r\n  const outputs = [\"Cat\", \"Dog\"]\r\n\r\n  return (\r\n    <DiagramWrapper>\r\n      {/* Input Layer */}\r\n      <Layer>\r\n        {inputs.map((label, i) => (\r\n          <Neuron key={i} data-label={label} />\r\n        ))}\r\n      </Layer>\r\n\r\n      {/* Hidden Layer */}\r\n      <Layer>\r\n        {hiddens.map((label, i) => (\r\n          <Neuron key={i} data-label={label} />\r\n        ))}\r\n      </Layer>\r\n\r\n      {/* Output Layer */}\r\n      <Layer>\r\n        {outputs.map((label, i) => (\r\n          <Neuron key={i} data-label={label} />\r\n        ))}\r\n      </Layer>\r\n\r\n      {/* Optional lines for signal flow */}\r\n      <SvgLines viewBox=\"0 0 600 300\" preserveAspectRatio=\"xMidYMid meet\">\r\n        <FlowLine x1=\"100\" y1=\"60\" x2=\"220\" y2=\"60\" />\r\n        <FlowLine x1=\"100\" y1=\"120\" x2=\"220\" y2=\"100\" />\r\n        <FlowLine x1=\"100\" y1=\"180\" x2=\"220\" y2=\"140\" />\r\n        <FlowLine x1=\"220\" y1=\"60\" x2=\"340\" y2=\"90\" />\r\n        <FlowLine x1=\"220\" y1=\"100\" x2=\"340\" y2=\"120\" />\r\n        <FlowLine x1=\"220\" y1=\"140\" x2=\"340\" y2=\"150\" />\r\n      </SvgLines>\r\n    </DiagramWrapper>\r\n  )\r\n}\r\n","// src/pages/chapter-4.js\r\nimport * as React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { Head } from \"../components/seo\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\nimport FlashcardsChapter4 from \"../components/FlashcardsChapter4\"\r\nimport NeuralNetworkDiagram from \"../components/NeuralNetworkDiagram\"\r\n\r\n\r\n\r\n\r\nconst DiagramWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  margin: 3rem 0;\r\n  gap: 3rem;\r\n`\r\n\r\nconst Layer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst Neuron = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  margin: 0.5rem;\r\n  border-radius: 50%;\r\n  background: #00ff90;\r\n  opacity: 0.8;\r\n  transition: transform 0.2s ease;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst LayerLabel = styled.p`\r\n  color: #00ffcc;\r\n  font-weight: bold;\r\n  margin-top: 1rem;\r\n  font-family: \"Courier New\", monospace;\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst PageWrapper = styled.div`\r\n  color: #00ff90;\r\n  background: black;\r\n  padding: 3rem 2rem;\r\n  font-family: \"Courier New\", monospace;\r\n  min-height: 100vh;\r\n\r\n  h1, h2, h3 {\r\n    color: #00ff90;\r\n    margin-top: 2rem;\r\n  }\r\n\r\n  p, li {\r\n    line-height: 1.7;\r\n  }\r\n\r\n  ul {\r\n    margin-left: 1.5rem;\r\n  }\r\n\r\n  strong {\r\n    color: #00ffcc;\r\n  }\r\n\r\n  code {\r\n    background: #111;\r\n    padding: 0.2rem 0.4rem;\r\n    border-radius: 4px;\r\n    color: #00ffcc;\r\n  }\r\n\r\n  .button-group {\r\n    margin-top: 3rem;\r\n    display: flex;\r\n    gap: 1rem;\r\n    flex-wrap: wrap;\r\n\r\n    a {\r\n      background: #00ff90;\r\n      color: black;\r\n      padding: 0.75rem 1.5rem;\r\n      border-radius: 8px;\r\n      text-decoration: none;\r\n      font-weight: bold;\r\n      transition: background 0.3s ease;\r\n\r\n      &:hover {\r\n        background: #00cc70;\r\n      }\r\n    }\r\n  }\r\n`\r\nconst CodeDemo = styled.pre`\r\n  background: #111;\r\n  color: #00ffcc;\r\n  padding: 1.5rem;\r\n  border-radius: 10px;\r\n  font-family: \"Courier New\", monospace;\r\n  white-space: pre-wrap;\r\n  margin-top: 2rem;\r\n  border: 1px solid #00ff90;\r\n`\r\nconst FlowLine = styled.line`\r\n  stroke: #00ff90;\r\n  stroke-width: 2;\r\n  stroke-dasharray: 6;\r\n  stroke-dashoffset: 0;\r\n  animation: dash 1.2s linear infinite;\r\n\r\n  @keyframes dash {\r\n    to {\r\n      stroke-dashoffset: -12;\r\n    }\r\n  }\r\n`\r\nconst NeuronCircle = styled.div`\r\n  position: relative;\r\n  ...\r\n  &::after {\r\n    content: attr(data-tooltip);\r\n    position: absolute;\r\n    top: -30px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    color: #00ffcc;\r\n    font-size: 0.75rem;\r\n    display: none;\r\n  }\r\n\r\n  &:hover::after {\r\n    display: block;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport default function Chapter4Page() {\r\n  return (\r\n    <Layout>\r\n      <PageWrapper>\r\n        <h1>🧠 Chapter 4: Fundamentals of Neural Networks</h1>\r\n        <p>\r\n          Neural networks are the foundation of deep learning. They mimic the structure of the human brain, enabling computers to recognize complex patterns and make intelligent decisions.\r\n        </p>\r\n        <NeuralNetworkDiagram />\r\n\r\n        <h2>🧬 Structure of a Neural Network</h2>\r\n        <ul>\r\n          <li><strong>Input Layer:</strong> Accepts raw features (like image pixels, text embeddings, etc).</li>\r\n          <li><strong>Hidden Layers:</strong> Perform intermediate computations and transformations.</li>\r\n          <li><strong>Output Layer:</strong> Produces predictions or scores.</li>\r\n        </ul>\r\n        <p>Each neuron applies a weighted sum of inputs, adds a bias, and uses an <strong>activation function</strong>.</p>\r\n        <h2>⚡ Activation Functions</h2>\r\n        <ul>\r\n          <li><strong>ReLU (Rectified Linear Unit):</strong> Efficient and widely used – <code>max(0, x)</code></li>\r\n          <li><strong>Sigmoid:</strong> Compresses output between 0 and 1 – good for probabilities</li>\r\n          <li><strong>Softmax:</strong> Converts logits into probabilities – often used in classification</li>\r\n        </ul>\r\n\r\n        <h2>🔁 Forward & Backward Propagation</h2>\r\n        <p>\r\n          During <strong>forward propagation</strong>, data flows through the network to produce predictions.\r\n        </p>\r\n        <p>\r\n          <strong>Backpropagation</strong> then adjusts weights using the error (loss) via <strong>gradient descent</strong>.\r\n        </p>\r\n\r\n        <h2>🎯 Loss Functions</h2>\r\n        <ul>\r\n          <li><strong>Binary Cross-Entropy:</strong> For binary classification</li>\r\n          <li><strong>Categorical Cross-Entropy:</strong> For multi-class classification</li>\r\n          <li><strong>MSE (Mean Squared Error):</strong> For regression tasks</li>\r\n        </ul>\r\n\r\n        <h2>🚀 Real-World Applications</h2>\r\n        <ul>\r\n          <li>Image classification (e.g., disease detection from medical scans)</li>\r\n          <li>Voice assistants (e.g., Siri, Alexa)</li>\r\n          <li>Text classification (e.g., spam filtering, sentiment analysis)</li>\r\n          <li>Fraud detection in financial systems</li>\r\n        </ul>\r\n\r\n        <h2>🧠 Key Takeaways</h2>\r\n        <ul>\r\n          <li>Neural networks learn from data by adjusting weights through training</li>\r\n          <li>Activation functions enable learning of complex patterns</li>\r\n          <li>Loss functions guide the learning by measuring prediction error</li>\r\n        </ul>\r\n\r\n        <CodeDemo>{`\r\n# Step-by-step neural network inference (pseudo-code)\r\n\r\ninputs = [0.3, 0.7, 0.2]\r\n\r\n# Hidden layer\r\nh1 = relu(w1 * inputs + b1)\r\nh2 = relu(w2 * inputs + b2)\r\n\r\n# Output layer\r\noutput = softmax([h1, h2])\r\n\r\nreturn prediction\r\n`}</CodeDemo>\r\n\r\n        <FlashcardsChapter4 />\r\n        <div className=\"button-group\">\r\n          <Link to=\"/quiz-chapter-4\">📝 Quiz</Link>\r\n          <Link to=\"/\">🏠 Home</Link>\r\n        </div>\r\n      </PageWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport { Head }\r\n\r\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","fadeIn","keyframes","Card","styled","div","withConfig","displayName","componentId","Button","button","flashcards","question","answer","FlashcardsChapter3","shuffledCards","shuffleArray","array","_toConsumableArray","sort","Math","random","index","setIndex","showAnswer","setShowAnswer","length","onClick","prev","nextCard","marginLeft","DiagramWrapper","Layer","Neuron","faded","SvgLines","svg","FlowLine","line","NeuralNetworkDiagram","map","label","i","key","viewBox","preserveAspectRatio","x1","y1","x2","y2","p","PageWrapper","CodeDemo","pre","Chapter4Page","Layout","FlashcardsChapter4","className","Link","to"],"sourceRoot":""}