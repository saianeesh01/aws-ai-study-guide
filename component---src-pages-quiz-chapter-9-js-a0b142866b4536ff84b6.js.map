{"version":3,"file":"component---src-pages-quiz-chapter-9-js-a0b142866b4536ff84b6.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/quiz-chapter-9.js"],"sourcesContent":["import * as React from \"react\"\nimport \"./layout.css\"\n\nconst Layout = ({ children, isFullWidth = false }) => {\n  return (\n    <>\n      <div\n        style={{\n          margin: \"0 auto\",\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\n        }}\n      >\n        <main>{children}</main>\n        {!isFullWidth && (\n          <footer\n            style={{\n              marginTop: `var(--space-5)`,\n              fontSize: `var(--font-sm)`,\n              color: \"#888\",\n            }}\n          >\n            © {new Date().getFullYear()} · Built for AWS AI learners\n          </footer>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","// src/components/seo.js\nimport * as React from \"react\"\n\nexport function Head({ title, description = \"\" }) {\n  const siteTitle = \"AWS AI Study Guide\"\n  const siteDescription = description || \"Interactive learning for AWS AI\"\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\n  const author = \"Aneesh Mussim\"\n\n  return (\n    <>\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\n      <meta name=\"description\" content={siteDescription} />\n      <meta property=\"og:title\" content={title || siteTitle} />\n      <meta property=\"og:description\" content={siteDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={siteUrl} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"twitter:title\" content={title || siteTitle} />\n      <meta name=\"twitter:description\" content={siteDescription} />\n    </>\n  )\n}\n","import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport { Head } from \"../components/seo\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\n\n// 🔁 Utility to shuffle questions\nfunction shuffleArray(array) {\n  return [...array].sort(() => Math.random() - 0.5)\n}\n\n// 💅 Styled Components\nconst Wrapper = styled.div`\n  background: black;\n  color: #00ff90;\n  font-family: \"Courier New\", monospace;\n  padding: 3rem 2rem;\n  min-height: 100vh;\n\n  h1 {\n    margin-bottom: 2rem;\n  }\n\n  .question {\n    margin-bottom: 2rem;\n  }\n\n  button {\n    background: #00ff90;\n    color: black;\n    border: none;\n    padding: 0.5rem 1rem;\n    margin-top: 1rem;\n    margin-right: 1rem;\n    border-radius: 6px;\n    cursor: pointer;\n    font-weight: bold;\n    transition: background 0.3s ease;\n\n    &:hover {\n      background: #00cc70;\n    }\n  }\n\n  .feedback {\n    margin-top: 1rem;\n    font-weight: bold;\n  }\n\n  .review {\n    margin-top: 2rem;\n    background: #111;\n    padding: 1rem;\n    border-radius: 10px;\n    border: 1px solid #00ff90;\n  }\n\n  .correct {\n    color: #00ff90;\n  }\n\n  .wrong {\n    color: red;\n  }\n\n  .button-nav {\n    margin-top: 2rem;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n\n    a, button {\n      background: #00ff90;\n      color: black;\n      font-weight: bold;\n      border: none;\n      padding: 0.6rem 1.2rem;\n      border-radius: 6px;\n      text-decoration: none;\n      cursor: pointer;\n      transition: background 0.3s ease;\n\n      &:hover {\n        background: #00cc70;\n      }\n    }\n  }\n`\n\n// 📚 Question Set (abbreviated for brevity)\nconst allQuestions = [\n    {\n      question: \"What is Amazon Forecast used for?\",\n      options: [\"Analyzing images\", \"Text classification\", \"Time-series forecasting\", \"Speech synthesis\"],\n      answer: \"Time-series forecasting\",\n      explanation: \"Forecast uses ML to predict future values in time-series data.\"\n    },\n    {\n      question: \"Which dataset is required in Forecast?\",\n      options: [\"Related Time Series\", \"Target Time Series\", \"Item Metadata\", \"Ground Truth\"],\n      answer: \"Target Time Series\",\n      explanation: \"This dataset contains the actual values you want to forecast.\"\n    },\n    {\n      question: \"What file format does Forecast expect?\",\n      options: [\"JSON\", \"XML\", \"CSV\", \"XLSX\"],\n      answer: \"CSV\",\n      explanation: \"CSV format is required with specific columns like timestamp, item_id, target_value.\"\n    },\n    {\n      question: \"What is a Predictor in Forecast?\",\n      options: [\"A visual graph\", \"A scheduled task\", \"A trained model\", \"An S3 bucket\"],\n      answer: \"A trained model\",\n      explanation: \"It’s the core model used to make predictions.\"\n    },\n    {\n      question: \"What is Forecast Horizon?\",\n      options: [\"How long to retain data\", \"Duration of model training\", \"How far into the future to predict\", \"How many files to process\"],\n      answer: \"How far into the future to predict\",\n      explanation: \"It determines how many steps ahead the model forecasts.\"\n    },\n    {\n      question: \"What does P90 quantile indicate?\",\n      options: [\"Low confidence\", \"Maximum value\", \"Conservative prediction\", \"Overfitting\"],\n      answer: \"Conservative prediction\",\n      explanation: \"P90 means 90% of values are expected to fall below this number.\"\n    },\n    {\n      question: \"Where must you upload input data for Forecast?\",\n      options: [\"RDS\", \"S3\", \"DynamoDB\", \"EFS\"],\n      answer: \"S3\",\n      explanation: \"Amazon Forecast reads time-series input from S3.\"\n    },\n    {\n      question: \"What kind of forecasts does DeepAR+ support?\",\n      options: [\"Binary classification\", \"Time-series predictions\", \"Image analysis\", \"Natural language translation\"],\n      answer: \"Time-series predictions\",\n      explanation: \"DeepAR+ is optimized for complex time-series forecasting.\"\n    },\n    {\n      question: \"What domain should be used for retail use cases?\",\n      options: [\"METRICS\", \"INVENTORY\", \"RETAIL\", \"FINANCE\"],\n      answer: \"RETAIL\",\n      explanation: \"Forecast lets you select a domain to optimize for your use case.\"\n    },\n    {\n      question: \"Which metric is NOT used by Forecast?\",\n      options: [\"WQL\", \"RMSE\", \"MAPE\", \"BLEU\"],\n      answer: \"BLEU\",\n      explanation: \"BLEU is used in translation tasks, not forecasting.\"\n    },\n  \n    // Real-World Questions\n    {\n      question: \"A store wants to predict weekly product sales. Which service do they use?\",\n      options: [\"Amazon Translate\", \"Amazon Forecast\", \"Amazon Lex\", \"Amazon SageMaker\"],\n      answer: \"Amazon Forecast\",\n      explanation: \"Forecast helps retail stores manage inventory based on sales predictions.\"\n    },\n    {\n      question: \"A logistics team wants to forecast delivery volumes. Best solution?\",\n      options: [\"Textract\", \"Forecast\", \"Comprehend\", \"Rekognition\"],\n      answer: \"Forecast\",\n      explanation: \"It's built for demand, volume, or resource forecasting in business scenarios.\"\n    },\n    {\n      question: \"How can a hospital use Amazon Forecast?\",\n      options: [\"Detect faces in records\", \"Predict patient inflow\", \"Translate medical documents\", \"Build a chatbot\"],\n      answer: \"Predict patient inflow\",\n      explanation: \"Forecast can help staff plan shifts based on historical volume trends.\"\n    },\n    {\n      question: \"A travel app wants to predict hotel demand for peak seasons. Which tool fits?\",\n      options: [\"Rekognition\", \"Polly\", \"Forecast\", \"Transcribe\"],\n      answer: \"Forecast\",\n      explanation: \"Forecast is perfect for seasonal demand prediction.\"\n    },\n    {\n      question: \"A telecom wants to predict internet usage by region. What should they use?\",\n      options: [\"Forecast\", \"Comprehend\", \"Polly\", \"Translate\"],\n      answer: \"Forecast\",\n      explanation: \"Time-series forecasting supports capacity planning in high-usage periods.\"\n    },\n    {\n      question: \"A startup wants to retrain forecasts monthly. How should they automate it?\",\n      options: [\"S3 triggers\", \"CloudWatch Events + Lambda\", \"Polly script\", \"Manual CLI commands\"],\n      answer: \"CloudWatch Events + Lambda\",\n      explanation: \"Scheduled automation ensures updated predictions with new data.\"\n    },\n    {\n      question: \"A chain of gyms wants to predict attendance. What Forecast feature helps?\",\n      options: [\"Key-Value input\", \"Metadata feature\", \"Quantile outputs\", \"Named entity recognition\"],\n      answer: \"Quantile outputs\",\n      explanation: \"Helps plan for average and worst-case attendance to staff accordingly.\"\n    },\n    {\n      question: \"What AWS integration is best for storing predictions post-forecast?\",\n      options: [\"S3\", \"CloudFront\", \"SNS\", \"Redshift\"],\n      answer: \"S3\",\n      explanation: \"Predicted values are exported to S3 for analysis or integration.\"\n    },\n    {\n      question: \"A sales dashboard needs daily updates from Forecast. What pattern should be used?\",\n      options: [\"Manual CLI\", \"API integration\", \"Email polling\", \"CloudTrail logs\"],\n      answer: \"API integration\",\n      explanation: \"Real-time predictions can be pulled into dashboards using APIs.\"\n    },\n    {\n      question: \"Which AWS service is used to visualize forecasts?\",\n      options: [\"Quicksight\", \"Textract\", \"Transcribe\", \"Lex\"],\n      answer: \"Quicksight\",\n      explanation: \"Forecast outputs can be imported into QuickSight for visualization.\"\n    }\n  ]\n  \n\nexport default function QuizChapter7() {\n  const [questions] = React.useState(() => shuffleArray(allQuestions))\n  const [current, setCurrent] = React.useState(0)\n  const [selected, setSelected] = React.useState(null)\n  const [score, setScore] = React.useState(0)\n  const [showResult, setShowResult] = React.useState(false)\n  const [answers, setAnswers] = React.useState([])\n\n  const currentQ = questions[current]\n\n  const handleAnswer = (option) => {\n    setSelected(option)\n    setAnswers((prev) => [...prev, { ...currentQ, selected: option }])\n    if (option === currentQ.answer) setScore((s) => s + 1)\n  }\n\n  const nextQuestion = () => {\n    if (current + 1 < questions.length) {\n      setCurrent((c) => c + 1)\n      setSelected(null)\n    } else {\n      setShowResult(true)\n    }\n  }\n\n  const retryQuiz = () => {\n    setCurrent(0)\n    setSelected(null)\n    setScore(0)\n    setAnswers([])\n    setShowResult(false)\n  }\n\n  return (\n    <Layout>\n      <Wrapper>\n        <h1>📝 Quiz: Chapter 8:  Computer Vision with AWS (Rekognition, Textract)</h1>\n\n        {!showResult ? (\n          <div className=\"question\">\n            <p><strong>Q{current + 1}:</strong> {currentQ.question}</p>\n            {currentQ.options.map((opt) => (\n              <div key={opt}>\n                <button onClick={() => handleAnswer(opt)} disabled={selected !== null}>\n                  {opt}\n                </button>\n              </div>\n            ))}\n            {selected && (\n              <p className=\"feedback\">\n                {selected === currentQ.answer ? \"✅ Correct!\" : `❌ Incorrect. Correct: ${currentQ.answer}`}\n              </p>\n            )}\n            {selected && <button onClick={nextQuestion}>Next</button>}\n          </div>\n        ) : (\n          <div>\n            <h2>✅ Your Score: {score} / {questions.length}</h2>\n            <p>{score >= questions.length * 0.8 ? \"🎉 Awesome job!\" : \"📚 Review and try again!\"}</p>\n\n            <button onClick={retryQuiz}>🔁 Retry Quiz</button>\n\n            <div className=\"review\">\n              <h3>📝 Review:</h3>\n              {answers.map((item, i) => (\n                <div key={i}>\n                  <p><strong>Q{i + 1}:</strong> {item.question}</p>\n                  <p>\n                    Your Answer:{\" \"}\n                    <span className={item.selected === item.answer ? \"correct\" : \"wrong\"}>\n                      {item.selected}\n                    </span>\n                  </p>\n                  <p>Correct Answer: {item.answer}</p>\n                  <p><em>🧠 {item.explanation}</em></p>\n                  <hr />\n                </div>\n              ))}\n            </div>\n\n            <div className=\"button-nav\">\n              <Link to=\"/chapter-9\">← Back to Chapter 9</Link>\n              <Link to=\"/\">🏠 Home</Link>\n            </div>\n          </div>\n        )}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport { Head }\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","Wrapper","styled","div","withConfig","displayName","componentId","allQuestions","question","options","answer","explanation","QuizChapter7","questions","shuffleArray","array","_toConsumableArray","sort","Math","random","current","setCurrent","selected","setSelected","score","setScore","showResult","setShowResult","answers","setAnswers","currentQ","Layout","length","onClick","retryQuiz","className","map","item","i","key","Link","to","opt","handleAnswer","option","prev","concat","s","disabled","nextQuestion","c"],"sourceRoot":""}