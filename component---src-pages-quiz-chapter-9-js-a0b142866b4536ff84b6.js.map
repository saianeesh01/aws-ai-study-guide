{"version":3,"file":"component---src-pages-quiz-chapter-9-js-a0b142866b4536ff84b6.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/quiz-chapter-9.js"],"sourcesContent":["import * as React from \"react\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children, isFullWidth = false }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          margin: \"0 auto\",\r\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\r\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\r\n        }}\r\n      >\r\n        <main>{children}</main>\r\n        {!isFullWidth && (\r\n          <footer\r\n            style={{\r\n              marginTop: `var(--space-5)`,\r\n              fontSize: `var(--font-sm)`,\r\n              color: \"#888\",\r\n            }}\r\n          >\r\n            © {new Date().getFullYear()} · Built for AWS AI learners\r\n          </footer>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","// src/components/seo.js\r\nimport * as React from \"react\"\r\n\r\nexport function Head({ title, description = \"\" }) {\r\n  const siteTitle = \"AWS AI Study Guide\"\r\n  const siteDescription = description || \"Interactive learning for AWS AI\"\r\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\r\n  const author = \"Aneesh Mussim\"\r\n\r\n  return (\r\n    <>\r\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\r\n      <meta name=\"description\" content={siteDescription} />\r\n      <meta property=\"og:title\" content={title || siteTitle} />\r\n      <meta property=\"og:description\" content={siteDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta property=\"og:url\" content={siteUrl} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={author} />\r\n      <meta name=\"twitter:title\" content={title || siteTitle} />\r\n      <meta name=\"twitter:description\" content={siteDescription} />\r\n    </>\r\n  )\r\n}\r\n","import * as React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { Head } from \"../components/seo\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\n// 🔁 Utility to shuffle questions\r\nfunction shuffleArray(array) {\r\n  return [...array].sort(() => Math.random() - 0.5)\r\n}\r\n\r\n// 💅 Styled Components\r\nconst Wrapper = styled.div`\r\n  background: black;\r\n  color: #00ff90;\r\n  font-family: \"Courier New\", monospace;\r\n  padding: 3rem 2rem;\r\n  min-height: 100vh;\r\n\r\n  h1 {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .question {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  button {\r\n    background: #00ff90;\r\n    color: black;\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    margin-top: 1rem;\r\n    margin-right: 1rem;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    transition: background 0.3s ease;\r\n\r\n    &:hover {\r\n      background: #00cc70;\r\n    }\r\n  }\r\n\r\n  .feedback {\r\n    margin-top: 1rem;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .review {\r\n    margin-top: 2rem;\r\n    background: #111;\r\n    padding: 1rem;\r\n    border-radius: 10px;\r\n    border: 1px solid #00ff90;\r\n  }\r\n\r\n  .correct {\r\n    color: #00ff90;\r\n  }\r\n\r\n  .wrong {\r\n    color: red;\r\n  }\r\n\r\n  .button-nav {\r\n    margin-top: 2rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n\r\n    a, button {\r\n      background: #00ff90;\r\n      color: black;\r\n      font-weight: bold;\r\n      border: none;\r\n      padding: 0.6rem 1.2rem;\r\n      border-radius: 6px;\r\n      text-decoration: none;\r\n      cursor: pointer;\r\n      transition: background 0.3s ease;\r\n\r\n      &:hover {\r\n        background: #00cc70;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// 📚 Question Set (abbreviated for brevity)\r\nconst allQuestions = [\r\n    {\r\n      question: \"What is Amazon Forecast used for?\",\r\n      options: [\"Analyzing images\", \"Text classification\", \"Time-series forecasting\", \"Speech synthesis\"],\r\n      answer: \"Time-series forecasting\",\r\n      explanation: \"Forecast uses ML to predict future values in time-series data.\"\r\n    },\r\n    {\r\n      question: \"Which dataset is required in Forecast?\",\r\n      options: [\"Related Time Series\", \"Target Time Series\", \"Item Metadata\", \"Ground Truth\"],\r\n      answer: \"Target Time Series\",\r\n      explanation: \"This dataset contains the actual values you want to forecast.\"\r\n    },\r\n    {\r\n      question: \"What file format does Forecast expect?\",\r\n      options: [\"JSON\", \"XML\", \"CSV\", \"XLSX\"],\r\n      answer: \"CSV\",\r\n      explanation: \"CSV format is required with specific columns like timestamp, item_id, target_value.\"\r\n    },\r\n    {\r\n      question: \"What is a Predictor in Forecast?\",\r\n      options: [\"A visual graph\", \"A scheduled task\", \"A trained model\", \"An S3 bucket\"],\r\n      answer: \"A trained model\",\r\n      explanation: \"It’s the core model used to make predictions.\"\r\n    },\r\n    {\r\n      question: \"What is Forecast Horizon?\",\r\n      options: [\"How long to retain data\", \"Duration of model training\", \"How far into the future to predict\", \"How many files to process\"],\r\n      answer: \"How far into the future to predict\",\r\n      explanation: \"It determines how many steps ahead the model forecasts.\"\r\n    },\r\n    {\r\n      question: \"What does P90 quantile indicate?\",\r\n      options: [\"Low confidence\", \"Maximum value\", \"Conservative prediction\", \"Overfitting\"],\r\n      answer: \"Conservative prediction\",\r\n      explanation: \"P90 means 90% of values are expected to fall below this number.\"\r\n    },\r\n    {\r\n      question: \"Where must you upload input data for Forecast?\",\r\n      options: [\"RDS\", \"S3\", \"DynamoDB\", \"EFS\"],\r\n      answer: \"S3\",\r\n      explanation: \"Amazon Forecast reads time-series input from S3.\"\r\n    },\r\n    {\r\n      question: \"What kind of forecasts does DeepAR+ support?\",\r\n      options: [\"Binary classification\", \"Time-series predictions\", \"Image analysis\", \"Natural language translation\"],\r\n      answer: \"Time-series predictions\",\r\n      explanation: \"DeepAR+ is optimized for complex time-series forecasting.\"\r\n    },\r\n    {\r\n      question: \"What domain should be used for retail use cases?\",\r\n      options: [\"METRICS\", \"INVENTORY\", \"RETAIL\", \"FINANCE\"],\r\n      answer: \"RETAIL\",\r\n      explanation: \"Forecast lets you select a domain to optimize for your use case.\"\r\n    },\r\n    {\r\n      question: \"Which metric is NOT used by Forecast?\",\r\n      options: [\"WQL\", \"RMSE\", \"MAPE\", \"BLEU\"],\r\n      answer: \"BLEU\",\r\n      explanation: \"BLEU is used in translation tasks, not forecasting.\"\r\n    },\r\n  \r\n    // Real-World Questions\r\n    {\r\n      question: \"A store wants to predict weekly product sales. Which service do they use?\",\r\n      options: [\"Amazon Translate\", \"Amazon Forecast\", \"Amazon Lex\", \"Amazon SageMaker\"],\r\n      answer: \"Amazon Forecast\",\r\n      explanation: \"Forecast helps retail stores manage inventory based on sales predictions.\"\r\n    },\r\n    {\r\n      question: \"A logistics team wants to forecast delivery volumes. Best solution?\",\r\n      options: [\"Textract\", \"Forecast\", \"Comprehend\", \"Rekognition\"],\r\n      answer: \"Forecast\",\r\n      explanation: \"It's built for demand, volume, or resource forecasting in business scenarios.\"\r\n    },\r\n    {\r\n      question: \"How can a hospital use Amazon Forecast?\",\r\n      options: [\"Detect faces in records\", \"Predict patient inflow\", \"Translate medical documents\", \"Build a chatbot\"],\r\n      answer: \"Predict patient inflow\",\r\n      explanation: \"Forecast can help staff plan shifts based on historical volume trends.\"\r\n    },\r\n    {\r\n      question: \"A travel app wants to predict hotel demand for peak seasons. Which tool fits?\",\r\n      options: [\"Rekognition\", \"Polly\", \"Forecast\", \"Transcribe\"],\r\n      answer: \"Forecast\",\r\n      explanation: \"Forecast is perfect for seasonal demand prediction.\"\r\n    },\r\n    {\r\n      question: \"A telecom wants to predict internet usage by region. What should they use?\",\r\n      options: [\"Forecast\", \"Comprehend\", \"Polly\", \"Translate\"],\r\n      answer: \"Forecast\",\r\n      explanation: \"Time-series forecasting supports capacity planning in high-usage periods.\"\r\n    },\r\n    {\r\n      question: \"A startup wants to retrain forecasts monthly. How should they automate it?\",\r\n      options: [\"S3 triggers\", \"CloudWatch Events + Lambda\", \"Polly script\", \"Manual CLI commands\"],\r\n      answer: \"CloudWatch Events + Lambda\",\r\n      explanation: \"Scheduled automation ensures updated predictions with new data.\"\r\n    },\r\n    {\r\n      question: \"A chain of gyms wants to predict attendance. What Forecast feature helps?\",\r\n      options: [\"Key-Value input\", \"Metadata feature\", \"Quantile outputs\", \"Named entity recognition\"],\r\n      answer: \"Quantile outputs\",\r\n      explanation: \"Helps plan for average and worst-case attendance to staff accordingly.\"\r\n    },\r\n    {\r\n      question: \"What AWS integration is best for storing predictions post-forecast?\",\r\n      options: [\"S3\", \"CloudFront\", \"SNS\", \"Redshift\"],\r\n      answer: \"S3\",\r\n      explanation: \"Predicted values are exported to S3 for analysis or integration.\"\r\n    },\r\n    {\r\n      question: \"A sales dashboard needs daily updates from Forecast. What pattern should be used?\",\r\n      options: [\"Manual CLI\", \"API integration\", \"Email polling\", \"CloudTrail logs\"],\r\n      answer: \"API integration\",\r\n      explanation: \"Real-time predictions can be pulled into dashboards using APIs.\"\r\n    },\r\n    {\r\n      question: \"Which AWS service is used to visualize forecasts?\",\r\n      options: [\"Quicksight\", \"Textract\", \"Transcribe\", \"Lex\"],\r\n      answer: \"Quicksight\",\r\n      explanation: \"Forecast outputs can be imported into QuickSight for visualization.\"\r\n    }\r\n  ]\r\n  \r\n\r\nexport default function QuizChapter7() {\r\n  const [questions] = React.useState(() => shuffleArray(allQuestions))\r\n  const [current, setCurrent] = React.useState(0)\r\n  const [selected, setSelected] = React.useState(null)\r\n  const [score, setScore] = React.useState(0)\r\n  const [showResult, setShowResult] = React.useState(false)\r\n  const [answers, setAnswers] = React.useState([])\r\n\r\n  const currentQ = questions[current]\r\n\r\n  const handleAnswer = (option) => {\r\n    setSelected(option)\r\n    setAnswers((prev) => [...prev, { ...currentQ, selected: option }])\r\n    if (option === currentQ.answer) setScore((s) => s + 1)\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    if (current + 1 < questions.length) {\r\n      setCurrent((c) => c + 1)\r\n      setSelected(null)\r\n    } else {\r\n      setShowResult(true)\r\n    }\r\n  }\r\n\r\n  const retryQuiz = () => {\r\n    setCurrent(0)\r\n    setSelected(null)\r\n    setScore(0)\r\n    setAnswers([])\r\n    setShowResult(false)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Wrapper>\r\n        <h1>📝 Quiz: Chapter 8:  Computer Vision with AWS (Rekognition, Textract)</h1>\r\n\r\n        {!showResult ? (\r\n          <div className=\"question\">\r\n            <p><strong>Q{current + 1}:</strong> {currentQ.question}</p>\r\n            {currentQ.options.map((opt) => (\r\n              <div key={opt}>\r\n                <button onClick={() => handleAnswer(opt)} disabled={selected !== null}>\r\n                  {opt}\r\n                </button>\r\n              </div>\r\n            ))}\r\n            {selected && (\r\n              <p className=\"feedback\">\r\n                {selected === currentQ.answer ? \"✅ Correct!\" : `❌ Incorrect. Correct: ${currentQ.answer}`}\r\n              </p>\r\n            )}\r\n            {selected && <button onClick={nextQuestion}>Next</button>}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>✅ Your Score: {score} / {questions.length}</h2>\r\n            <p>{score >= questions.length * 0.8 ? \"🎉 Awesome job!\" : \"📚 Review and try again!\"}</p>\r\n\r\n            <button onClick={retryQuiz}>🔁 Retry Quiz</button>\r\n\r\n            <div className=\"review\">\r\n              <h3>📝 Review:</h3>\r\n              {answers.map((item, i) => (\r\n                <div key={i}>\r\n                  <p><strong>Q{i + 1}:</strong> {item.question}</p>\r\n                  <p>\r\n                    Your Answer:{\" \"}\r\n                    <span className={item.selected === item.answer ? \"correct\" : \"wrong\"}>\r\n                      {item.selected}\r\n                    </span>\r\n                  </p>\r\n                  <p>Correct Answer: {item.answer}</p>\r\n                  <p><em>🧠 {item.explanation}</em></p>\r\n                  <hr />\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"button-nav\">\r\n              <Link to=\"/chapter-9\">← Back to Chapter 9</Link>\r\n              <Link to=\"/\">🏠 Home</Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport { Head }\r\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","Wrapper","styled","div","withConfig","displayName","componentId","allQuestions","question","options","answer","explanation","QuizChapter7","questions","shuffleArray","array","_toConsumableArray","sort","Math","random","current","setCurrent","selected","setSelected","score","setScore","showResult","setShowResult","answers","setAnswers","currentQ","Layout","length","onClick","retryQuiz","className","map","item","i","key","Link","to","opt","handleAnswer","option","prev","concat","s","disabled","nextQuestion","c"],"sourceRoot":""}