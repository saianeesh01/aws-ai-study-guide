{"version":3,"file":"component---src-pages-quiz-chapter-6-js-d7a7cc8838af957f00f7.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/quiz-chapter-6.js"],"sourcesContent":["import * as React from \"react\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children, isFullWidth = false }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          margin: \"0 auto\",\r\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\r\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\r\n        }}\r\n      >\r\n        <main>{children}</main>\r\n        {!isFullWidth && (\r\n          <footer\r\n            style={{\r\n              marginTop: `var(--space-5)`,\r\n              fontSize: `var(--font-sm)`,\r\n              color: \"#888\",\r\n            }}\r\n          >\r\n            © {new Date().getFullYear()} · Built for AWS AI learners\r\n          </footer>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","// src/components/seo.js\r\nimport * as React from \"react\"\r\n\r\nexport function Head({ title, description = \"\" }) {\r\n  const siteTitle = \"AWS AI Study Guide\"\r\n  const siteDescription = description || \"Interactive learning for AWS AI\"\r\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\r\n  const author = \"Aneesh Mussim\"\r\n\r\n  return (\r\n    <>\r\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\r\n      <meta name=\"description\" content={siteDescription} />\r\n      <meta property=\"og:title\" content={title || siteTitle} />\r\n      <meta property=\"og:description\" content={siteDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta property=\"og:url\" content={siteUrl} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={author} />\r\n      <meta name=\"twitter:title\" content={title || siteTitle} />\r\n      <meta name=\"twitter:description\" content={siteDescription} />\r\n    </>\r\n  )\r\n}\r\n","import * as React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { Head } from \"../components/seo\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\n// 🔁 Utility to shuffle questions\r\nfunction shuffleArray(array) {\r\n  return [...array].sort(() => Math.random() - 0.5)\r\n}\r\n\r\n// 💅 Styled Components\r\nconst Wrapper = styled.div`\r\n  background: black;\r\n  color: #00ff90;\r\n  font-family: \"Courier New\", monospace;\r\n  padding: 3rem 2rem;\r\n  min-height: 100vh;\r\n\r\n  h1 {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .question {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  button {\r\n    background: #00ff90;\r\n    color: black;\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    margin-top: 1rem;\r\n    margin-right: 1rem;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    transition: background 0.3s ease;\r\n\r\n    &:hover {\r\n      background: #00cc70;\r\n    }\r\n  }\r\n\r\n  .feedback {\r\n    margin-top: 1rem;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .review {\r\n    margin-top: 2rem;\r\n    background: #111;\r\n    padding: 1rem;\r\n    border-radius: 10px;\r\n    border: 1px solid #00ff90;\r\n  }\r\n\r\n  .correct {\r\n    color: #00ff90;\r\n  }\r\n\r\n  .wrong {\r\n    color: red;\r\n  }\r\n\r\n  .button-nav {\r\n    margin-top: 2rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n\r\n    a, button {\r\n      background: #00ff90;\r\n      color: black;\r\n      font-weight: bold;\r\n      border: none;\r\n      padding: 0.6rem 1.2rem;\r\n      border-radius: 6px;\r\n      text-decoration: none;\r\n      cursor: pointer;\r\n      transition: background 0.3s ease;\r\n\r\n      &:hover {\r\n        background: #00cc70;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// 📚 Question Set (abbreviated for brevity)\r\nconst allQuestions = [\r\n    {\r\n        question: \"Which service would you use to extract key-value pairs from scanned forms?\",\r\n        options: [\"Amazon Textract\", \"Amazon Rekognition\", \"Amazon Polly\", \"SageMaker Ground Truth\"],\r\n        answer: \"Amazon Textract\",\r\n        explanation: \"Textract extracts structured text from scanned documents like forms and tables.\"\r\n      },\r\n      {\r\n        question: \"What is Amazon Personalize mainly used for?\",\r\n        options: [\"Speech recognition\", \"Building recommendation systems\", \"Image detection\", \"Model training\"],\r\n        answer: \"Building recommendation systems\",\r\n        explanation: \"Amazon Personalize creates personalized user experiences like recommendations.\"\r\n      },\r\n      {\r\n        question: \"Which AWS service is ideal for translating text between languages?\",\r\n        options: [\"Amazon Transcribe\", \"Amazon Translate\", \"Amazon Comprehend\", \"Amazon Lex\"],\r\n        answer: \"Amazon Translate\",\r\n        explanation: \"Translate converts text between languages using neural machine translation.\"\r\n      },\r\n      {\r\n        question: \"What does SageMaker Autopilot automate?\",\r\n        options: [\"Data storage\", \"Model selection and tuning\", \"Speech recognition\", \"Labeling\"],\r\n        answer: \"Model selection and tuning\",\r\n        explanation: \"Autopilot automatically chooses algorithms and tunes them.\"\r\n      },\r\n      {\r\n        question: \"What is the output of Amazon Transcribe?\",\r\n        options: [\"Audio\", \"Text\", \"Language codes\", \"Images\"],\r\n        answer: \"Text\",\r\n        explanation: \"Amazon Transcribe converts audio to written text.\"\r\n      },\r\n      {\r\n        question: \"Which AWS service would you use to detect objects in images?\",\r\n        options: [\"Comprehend\", \"Polly\", \"Rekognition\", \"Lex\"],\r\n        answer: \"Rekognition\",\r\n        explanation: \"Amazon Rekognition detects objects, faces, and activities in images and videos.\"\r\n      },\r\n      {\r\n        question: \"What is the role of SageMaker Model Monitor?\",\r\n        options: [\"Converts images to text\", \"Tracks model performance in production\", \"Speech synthesis\", \"Encrypts training data\"],\r\n        answer: \"Tracks model performance in production\",\r\n        explanation: \"Model Monitor checks for data drift or accuracy decline in deployed models.\"\r\n      },\r\n      {\r\n        question: \"You want to build a customer support chatbot. Which service do you use?\",\r\n        options: [\"Amazon Comprehend\", \"Amazon Polly\", \"Amazon Lex\", \"Amazon Forecast\"],\r\n        answer: \"Amazon Lex\",\r\n        explanation: \"Lex enables voice and text conversational interfaces.\"\r\n      },\r\n      {\r\n        question: \"Which service would you use to get product demand forecasts?\",\r\n        options: [\"Forecast\", \"Textract\", \"Transcribe\", \"Polly\"],\r\n        answer: \"Forecast\",\r\n        explanation: \"Amazon Forecast is used for time series forecasting tasks like demand prediction.\"\r\n      },\r\n      {\r\n        question: \"What is Amazon Comprehend primarily used for?\",\r\n        options: [\"Translating text\", \"Text-to-speech\", \"Extracting insights from text\", \"Speech recognition\"],\r\n        answer: \"Extracting insights from text\",\r\n        explanation: \"Comprehend uses NLP to find sentiment, key phrases, and entities in text.\"\r\n      },\r\n      {\r\n        question: \"A hospital needs real-time transcription of doctor-patient conversations. Which service fits?\",\r\n        options: [\"Amazon Polly\", \"Amazon Transcribe\", \"Amazon Lex\", \"SageMaker Studio\"],\r\n        answer: \"Amazon Transcribe\",\r\n        explanation: \"Transcribe is designed for real-time speech-to-text conversion.\"\r\n      },\r\n      {\r\n        question: \"A retailer wants to recommend products based on customer history. Which AWS service should they use?\",\r\n        options: [\"Amazon Comprehend\", \"Amazon Personalize\", \"Amazon Rekognition\", \"Amazon Textract\"],\r\n        answer: \"Amazon Personalize\",\r\n        explanation: \"Personalize builds and deploys personalized recommendation models.\"\r\n      },\r\n      {\r\n        question: \"Your app needs to read IDs from scanned images. What service should be used?\",\r\n        options: [\"Amazon Lex\", \"Amazon Forecast\", \"Amazon Textract\", \"Amazon Polly\"],\r\n        answer: \"Amazon Textract\",\r\n        explanation: \"Textract reads text and form data from scanned images/documents.\"\r\n      },\r\n      {\r\n        question: \"You need to forecast future traffic on a website. Which tool works best?\",\r\n        options: [\"Amazon Forecast\", \"Amazon Translate\", \"Amazon Polly\", \"Amazon Lex\"],\r\n        answer: \"Amazon Forecast\",\r\n        explanation: \"Forecast is used for time series data forecasting like traffic or sales.\"\r\n      },\r\n      {\r\n        question: \"An ecommerce platform wants to show similar products using image similarity. Which service helps?\",\r\n        options: [\"Amazon Polly\", \"Amazon Rekognition\", \"Amazon Transcribe\", \"Amazon Forecast\"],\r\n        answer: \"Amazon Rekognition\",\r\n        explanation: \"Rekognition supports face and object comparison across images.\"\r\n      },\r\n      {\r\n        question: \"Which SageMaker component lets you run notebooks in the cloud?\",\r\n        options: [\"SageMaker Studio\", \"SageMaker Pipelines\", \"Notebook Instance\", \"SageMaker Model Monitor\"],\r\n        answer: \"Notebook Instance\",\r\n        explanation: \"Notebook instances are managed compute environments for ML development.\"\r\n      },\r\n      {\r\n        question: \"A support center wants to analyze sentiment from chat logs. What service can help?\",\r\n        options: [\"Amazon Translate\", \"Amazon Forecast\", \"Amazon Comprehend\", \"Amazon Lex\"],\r\n        answer: \"Amazon Comprehend\",\r\n        explanation: \"Comprehend can extract sentiment and key phrases from text data.\"\r\n      },\r\n      {\r\n        question: \"You want to convert user input into speech. What AWS service is suitable?\",\r\n        options: [\"Amazon Comprehend\", \"Amazon Textract\", \"Amazon Polly\", \"Amazon Lex\"],\r\n        answer: \"Amazon Polly\",\r\n        explanation: \"Polly converts written text into lifelike spoken audio.\"\r\n      },\r\n      {\r\n        question: \"What AWS service allows real-time inference on incoming data?\",\r\n        options: [\"S3\", \"SageMaker Endpoint\", \"Comprehend\", \"Glue\"],\r\n        answer: \"SageMaker Endpoint\",\r\n        explanation: \"Endpoints serve trained models and return predictions in real time.\"\r\n      },\r\n      {\r\n        question: \"Which AWS ML service supports building no-code workflows with templates?\",\r\n        options: [\"SageMaker Studio\", \"SageMaker JumpStart\", \"Forecast\", \"Textract\"],\r\n        answer: \"SageMaker JumpStart\",\r\n        explanation: \"JumpStart offers built-in solutions and models to simplify getting started.\"\r\n      }\r\n    ]\r\n\r\n\r\nexport default function QuizChapter6() {\r\n  const [questions] = React.useState(() => shuffleArray(allQuestions))\r\n  const [current, setCurrent] = React.useState(0)\r\n  const [selected, setSelected] = React.useState(null)\r\n  const [score, setScore] = React.useState(0)\r\n  const [showResult, setShowResult] = React.useState(false)\r\n  const [answers, setAnswers] = React.useState([])\r\n\r\n  const currentQ = questions[current]\r\n\r\n  const handleAnswer = (option) => {\r\n    setSelected(option)\r\n    setAnswers((prev) => [...prev, { ...currentQ, selected: option }])\r\n    if (option === currentQ.answer) setScore((s) => s + 1)\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    if (current + 1 < questions.length) {\r\n      setCurrent((c) => c + 1)\r\n      setSelected(null)\r\n    } else {\r\n      setShowResult(true)\r\n    }\r\n  }\r\n\r\n  const retryQuiz = () => {\r\n    setCurrent(0)\r\n    setSelected(null)\r\n    setScore(0)\r\n    setAnswers([])\r\n    setShowResult(false)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Wrapper>\r\n        <h1>📝 Quiz: Chapter 6: Model Deployment & Monitoring</h1>\r\n\r\n        {!showResult ? (\r\n          <div className=\"question\">\r\n            <p><strong>Q{current + 1}:</strong> {currentQ.question}</p>\r\n            {currentQ.options.map((opt) => (\r\n              <div key={opt}>\r\n                <button onClick={() => handleAnswer(opt)} disabled={selected !== null}>\r\n                  {opt}\r\n                </button>\r\n              </div>\r\n            ))}\r\n            {selected && (\r\n              <p className=\"feedback\">\r\n                {selected === currentQ.answer ? \"✅ Correct!\" : `❌ Incorrect. Correct: ${currentQ.answer}`}\r\n              </p>\r\n            )}\r\n            {selected && <button onClick={nextQuestion}>Next</button>}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>✅ Your Score: {score} / {questions.length}</h2>\r\n            <p>{score >= questions.length * 0.8 ? \"🎉 Awesome job!\" : \"📚 Review and try again!\"}</p>\r\n\r\n            <button onClick={retryQuiz}>🔁 Retry Quiz</button>\r\n\r\n            <div className=\"review\">\r\n              <h3>📝 Review:</h3>\r\n              {answers.map((item, i) => (\r\n                <div key={i}>\r\n                  <p><strong>Q{i + 1}:</strong> {item.question}</p>\r\n                  <p>\r\n                    Your Answer:{\" \"}\r\n                    <span className={item.selected === item.answer ? \"correct\" : \"wrong\"}>\r\n                      {item.selected}\r\n                    </span>\r\n                  </p>\r\n                  <p>Correct Answer: {item.answer}</p>\r\n                  <p><em>🧠 {item.explanation}</em></p>\r\n                  <hr />\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"button-nav\">\r\n              <Link to=\"/chapter-6\">← Back to Chapter 6</Link>\r\n              <Link to=\"/\">🏠 Home</Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport { Head }\r\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","Wrapper","styled","div","withConfig","displayName","componentId","allQuestions","question","options","answer","explanation","QuizChapter6","questions","shuffleArray","array","_toConsumableArray","sort","Math","random","current","setCurrent","selected","setSelected","score","setScore","showResult","setShowResult","answers","setAnswers","currentQ","Layout","length","onClick","retryQuiz","className","map","item","i","key","Link","to","opt","handleAnswer","option","prev","concat","s","disabled","nextQuestion","c"],"sourceRoot":""}