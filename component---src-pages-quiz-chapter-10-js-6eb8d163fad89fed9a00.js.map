{"version":3,"file":"component---src-pages-quiz-chapter-10-js-6eb8d163fad89fed9a00.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/quiz-chapter-10.js"],"sourcesContent":["import * as React from \"react\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children, isFullWidth = false }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          margin: \"0 auto\",\r\n          maxWidth: isFullWidth ? \"100%\" : \"var(--size-content)\",\r\n          padding: isFullWidth ? \"0\" : \"var(--size-gutter)\",\r\n        }}\r\n      >\r\n        <main>{children}</main>\r\n        {!isFullWidth && (\r\n          <footer\r\n            style={{\r\n              marginTop: `var(--space-5)`,\r\n              fontSize: `var(--font-sm)`,\r\n              color: \"#888\",\r\n            }}\r\n          >\r\n            © {new Date().getFullYear()} · Built for AWS AI learners\r\n          </footer>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","// src/components/seo.js\r\nimport * as React from \"react\"\r\n\r\nexport function Head({ title, description = \"\" }) {\r\n  const siteTitle = \"AWS AI Study Guide\"\r\n  const siteDescription = description || \"Interactive learning for AWS AI\"\r\n  const siteUrl = \"https://saianeesh01.github.io/aws-ai-study-guide\"\r\n  const author = \"Aneesh Mussim\"\r\n\r\n  return (\r\n    <>\r\n      <title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>\r\n      <meta name=\"description\" content={siteDescription} />\r\n      <meta property=\"og:title\" content={title || siteTitle} />\r\n      <meta property=\"og:description\" content={siteDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta property=\"og:url\" content={siteUrl} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={author} />\r\n      <meta name=\"twitter:title\" content={title || siteTitle} />\r\n      <meta name=\"twitter:description\" content={siteDescription} />\r\n    </>\r\n  )\r\n}\r\n","import * as React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { Head } from \"../components/seo\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\n// 🔁 Utility to shuffle questions\r\nfunction shuffleArray(array) {\r\n  return [...array].sort(() => Math.random() - 0.5)\r\n}\r\n\r\n// 💅 Styled Components\r\nconst Wrapper = styled.div`\r\n  background: black;\r\n  color: #00ff90;\r\n  font-family: \"Courier New\", monospace;\r\n  padding: 3rem 2rem;\r\n  min-height: 100vh;\r\n\r\n  h1 {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .question {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  button {\r\n    background: #00ff90;\r\n    color: black;\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    margin-top: 1rem;\r\n    margin-right: 1rem;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    transition: background 0.3s ease;\r\n\r\n    &:hover {\r\n      background: #00cc70;\r\n    }\r\n  }\r\n\r\n  .feedback {\r\n    margin-top: 1rem;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .review {\r\n    margin-top: 2rem;\r\n    background: #111;\r\n    padding: 1rem;\r\n    border-radius: 10px;\r\n    border: 1px solid #00ff90;\r\n  }\r\n\r\n  .correct {\r\n    color: #00ff90;\r\n  }\r\n\r\n  .wrong {\r\n    color: red;\r\n  }\r\n\r\n  .button-nav {\r\n    margin-top: 2rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n\r\n    a, button {\r\n      background: #00ff90;\r\n      color: black;\r\n      font-weight: bold;\r\n      border: none;\r\n      padding: 0.6rem 1.2rem;\r\n      border-radius: 6px;\r\n      text-decoration: none;\r\n      cursor: pointer;\r\n      transition: background 0.3s ease;\r\n\r\n      &:hover {\r\n        background: #00cc70;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// 📚 Question Set (abbreviated for brevity)\r\nconst allQuestions = [\r\n    {\r\n      question: \"What is Amazon Personalize?\",\r\n      options: [\"Chatbot builder\", \"Time-series forecaster\", \"Recommendation system\", \"Object detection tool\"],\r\n      answer: \"Recommendation system\",\r\n      explanation: \"Personalize builds and serves personalized user recommendations.\"\r\n    },\r\n    {\r\n      question: \"What is a recipe in Personalize?\",\r\n      options: [\"Dataset upload format\", \"S3 storage setting\", \"Algorithm configuration\", \"Model type\"],\r\n      answer: \"Algorithm configuration\",\r\n      explanation: \"Recipes define the algorithms used for training solutions.\"\r\n    },\r\n    {\r\n      question: \"What dataset types are supported?\",\r\n      options: [\"Metrics, Summary, Features\", \"Users, Items, Interactions\", \"Audio, Text, Images\", \"Only CSVs\"],\r\n      answer: \"Users, Items, Interactions\",\r\n      explanation: \"These form the core datasets for personalization.\"\r\n    },\r\n    {\r\n      question: \"How are recommendations delivered?\",\r\n      options: [\"Email\", \"SNS\", \"API endpoint\", \"S3 sync\"],\r\n      answer: \"API endpoint\",\r\n      explanation: \"You use GetRecommendations or GetPersonalizedRanking via API.\"\r\n    },\r\n    {\r\n      question: \"What does an event tracker do?\",\r\n      options: [\"Logs IAM roles\", \"Updates UI\", \"Tracks live user activity\", \"Optimizes latency\"],\r\n      answer: \"Tracks live user activity\",\r\n      explanation: \"Event trackers update interactions in real-time for live recommendations.\"\r\n    },\r\n    {\r\n      question: \"What metric is used to evaluate performance?\",\r\n      options: [\"BLEU\", \"RMSE\", \"Precision@K\", \"WQL\"],\r\n      answer: \"Precision@K\",\r\n      explanation: \"Precision@K measures how often the top-K results were relevant.\"\r\n    },\r\n    {\r\n      question: \"Which recipe provides similar item results?\",\r\n      options: [\"HRNN\", \"SIMS\", \"Popularity Count\", \"ARIMA\"],\r\n      answer: \"SIMS\",\r\n      explanation: \"SIMS finds items that are similar to a given input.\"\r\n    },\r\n    {\r\n      question: \"How do you retrain a model?\",\r\n      options: [\"Use Lambda\", \"Create new campaign\", \"Create a new solution version\", \"Modify IAM role\"],\r\n      answer: \"Create a new solution version\",\r\n      explanation: \"A new version uses updated data for better performance.\"\r\n    },\r\n    {\r\n      question: \"What’s a cold-start solution?\",\r\n      options: [\"Static config file\", \"Popular items model\", \"Hard-coded results\", \"Delete metadata\"],\r\n      answer: \"Popular items model\",\r\n      explanation: \"Cold-start scenarios fall back to popularity-based results.\"\r\n    },\r\n    {\r\n      question: \"Is metadata mandatory for training?\",\r\n      options: [\"Yes\", \"No\", \"Only for HRNN\", \"Only for cold-start\"],\r\n      answer: \"No\",\r\n      explanation: \"Only the interaction dataset is required; metadata is optional.\"\r\n    },\r\n  \r\n    // Real-world questions\r\n    {\r\n      question: \"An e-commerce app wants to recommend products to users. Which AWS service fits?\",\r\n      options: [\"Lex\", \"Forecast\", \"Personalize\", \"Rekognition\"],\r\n      answer: \"Personalize\",\r\n      explanation: \"Personalize builds scalable product recommendation engines.\"\r\n    },\r\n    {\r\n      question: \"A streaming platform wants to show 'Because you watched...' sections. Which recipe helps?\",\r\n      options: [\"Popularity Count\", \"SIMS\", \"HRNN-Metadata\", \"AutoGluon\"],\r\n      answer: \"HRNN-Metadata\",\r\n      explanation: \"This recipe blends user history with metadata for better personalization.\"\r\n    },\r\n    {\r\n      question: \"A blog site wants to show trending posts. What should they use?\",\r\n      options: [\"Comprehend\", \"Personalize with popularity count\", \"Translate\", \"Textract\"],\r\n      answer: \"Personalize with popularity count\",\r\n      explanation: \"Popularity-based ranking handles anonymous visitors effectively.\"\r\n    },\r\n    {\r\n      question: \"A travel app wants to suggest destinations based on user history. What dataset is most useful?\",\r\n      options: [\"Interactions\", \"Item metadata\", \"IAM policies\", \"Images\"],\r\n      answer: \"Interactions\",\r\n      explanation: \"Interaction history helps drive personalized location suggestions.\"\r\n    },\r\n    {\r\n      question: \"An online store wants to personalize search results. What service supports this?\",\r\n      options: [\"Lex\", \"Rekognition\", \"Personalize\", \"Glue\"],\r\n      answer: \"Personalize\",\r\n      explanation: \"Personalize enables re-ranking and relevance for search results.\"\r\n    },\r\n    {\r\n      question: \"A mobile app wants recommendations to adapt as users scroll. What is required?\",\r\n      options: [\"SNS\", \"Event tracker\", \"Static files\", \"Translate\"],\r\n      answer: \"Event tracker\",\r\n      explanation: \"Event trackers update recommendations based on recent activity.\"\r\n    },\r\n    {\r\n      question: \"How should you handle a user with no history?\",\r\n      options: [\"Return 404\", \"Use cold-start recipes\", \"Wait for data\", \"Skip user\"],\r\n      answer: \"Use cold-start recipes\",\r\n      explanation: \"These recipes return popular or category-based results.\"\r\n    },\r\n    {\r\n      question: \"A retailer wants to combine click, view, and buy signals. What dataset should they build?\",\r\n      options: [\"User JSON\", \"Interaction dataset\", \"Lambda config\", \"SageMaker script\"],\r\n      answer: \"Interaction dataset\",\r\n      explanation: \"The interaction file logs these events and timestamps.\"\r\n    },\r\n    {\r\n      question: \"What service should a dev use to call Personalize recommendations in React?\",\r\n      options: [\"S3 fetch\", \"CloudFront\", \"REST API\", \"Static import\"],\r\n      answer: \"REST API\",\r\n      explanation: \"Personalize provides live recommendation endpoints.\"\r\n    },\r\n    {\r\n      question: \"A dev team wants to filter recommendations by product category. What should they use?\",\r\n      options: [\"Schema constraints\", \"Metadata filter\", \"Query param injection\", \"New training set\"],\r\n      answer: \"Metadata filter\",\r\n      explanation: \"Filters apply rules during recommendation retrieval (e.g., only 'shoes').\"\r\n    }\r\n  ]\r\n  \r\n  \r\n\r\nexport default function QuizChapter11() {\r\n  const [questions] = React.useState(() => shuffleArray(allQuestions))\r\n  const [current, setCurrent] = React.useState(0)\r\n  const [selected, setSelected] = React.useState(null)\r\n  const [score, setScore] = React.useState(0)\r\n  const [showResult, setShowResult] = React.useState(false)\r\n  const [answers, setAnswers] = React.useState([])\r\n\r\n  const currentQ = questions[current]\r\n\r\n  const handleAnswer = (option) => {\r\n    setSelected(option)\r\n    setAnswers((prev) => [...prev, { ...currentQ, selected: option }])\r\n    if (option === currentQ.answer) setScore((s) => s + 1)\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    if (current + 1 < questions.length) {\r\n      setCurrent((c) => c + 1)\r\n      setSelected(null)\r\n    } else {\r\n      setShowResult(true)\r\n    }\r\n  }\r\n\r\n  const retryQuiz = () => {\r\n    setCurrent(0)\r\n    setSelected(null)\r\n    setScore(0)\r\n    setAnswers([])\r\n    setShowResult(false)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Wrapper>\r\n        <h1>📝 Quiz: Chapter 10:  Computer Vision with AWS (Rekognition, Textract)</h1>\r\n\r\n        {!showResult ? (\r\n          <div className=\"question\">\r\n            <p><strong>Q{current + 1}:</strong> {currentQ.question}</p>\r\n            {currentQ.options.map((opt) => (\r\n              <div key={opt}>\r\n                <button onClick={() => handleAnswer(opt)} disabled={selected !== null}>\r\n                  {opt}\r\n                </button>\r\n              </div>\r\n            ))}\r\n            {selected && (\r\n              <p className=\"feedback\">\r\n                {selected === currentQ.answer ? \"✅ Correct!\" : `❌ Incorrect. Correct: ${currentQ.answer}`}\r\n              </p>\r\n            )}\r\n            {selected && <button onClick={nextQuestion}>Next</button>}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>✅ Your Score: {score} / {questions.length}</h2>\r\n            <p>{score >= questions.length * 0.8 ? \"🎉 Awesome job!\" : \"📚 Review and try again!\"}</p>\r\n\r\n            <button onClick={retryQuiz}>🔁 Retry Quiz</button>\r\n\r\n            <div className=\"review\">\r\n              <h3>📝 Review:</h3>\r\n              {answers.map((item, i) => (\r\n                <div key={i}>\r\n                  <p><strong>Q{i + 1}:</strong> {item.question}</p>\r\n                  <p>\r\n                    Your Answer:{\" \"}\r\n                    <span className={item.selected === item.answer ? \"correct\" : \"wrong\"}>\r\n                      {item.selected}\r\n                    </span>\r\n                  </p>\r\n                  <p>Correct Answer: {item.answer}</p>\r\n                  <p><em>🧠 {item.explanation}</em></p>\r\n                  <hr />\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"button-nav\">\r\n              <Link to=\"/chapter-10\">← Back to Chapter 10</Link>\r\n              <Link to=\"/\">🏠 Home</Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport { Head }\r\n"],"names":["_ref","children","isFullWidth","React","style","margin","maxWidth","padding","marginTop","fontSize","color","Date","getFullYear","Head","title","description","siteTitle","siteDescription","name","content","property","Wrapper","styled","div","withConfig","displayName","componentId","allQuestions","question","options","answer","explanation","QuizChapter11","questions","shuffleArray","array","_toConsumableArray","sort","Math","random","current","setCurrent","selected","setSelected","score","setScore","showResult","setShowResult","answers","setAnswers","currentQ","Layout","length","onClick","retryQuiz","className","map","item","i","key","Link","to","opt","handleAnswer","option","prev","concat","s","disabled","nextQuestion","c"],"sourceRoot":""}